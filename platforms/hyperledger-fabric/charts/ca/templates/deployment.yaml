---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Values.server.name }}
  namespace: {{ $.Values.metadata.namespace }}
  labels:
    app.kubernetes.io/name: {{ $.Values.server.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: {{ $.Values.server.name }}
      app.kubernetes.io/name: {{ $.Values.server.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        name: {{ $.Values.server.name }}
        app.kubernetes.io/name: {{ $.Values.server.name }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
    spec:
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      imagePullSecrets:
        - name: {{ $.Values.vault.imagesecretname }}
      volumes:
      - name: ca-server-db
        persistentVolumeClaim:
          claimName: ca-server-db-pvc
      - name: certificates
        emptyDir:
          medium: Memory
      {{ if .Values.vault.tls  }}
      - name: vaultca
        secret:
          secretName: {{ $.Values.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt
      {{ end  }}
      containers:
      - name: ca-certs-init
        image: {{ $.Values.metadata.images.alpineutils }}
        imagePullPolicy: Always
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: MOUNT_PATH
          value: /secret
        command: ["sh", "-c", "/bin/bash"]
        args: [ "while true; do sleep 30; done;" ]
          

        volumeMounts:
        - name: certificates
          mountPath: /secret
        {{ if .Values.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
      - name: ca
        image: {{ $.Values.metadata.images.ca }}
        command: ["sh", "-c", "sleep 1 && fabric-ca-server start -b {{ $.Values.server.admin }}:`cat /etc/hyperledger/fabric-ca-server-config/user_cred` -d"]
        ports:
        - containerPort: 7054
        env:
        - name: FABRIC_CA_HOME
          value: /etc/hyperledger/fabric-ca-server
        - name: FABRIC_CA_SERVER_CA_NAME
          value: "{{ $.Values.server.name }}.{{ $.Values.metadata.namespace }}"
        - name: FABRIC_CA_SERVER_CA_CERTFILE
          value:  /etc/hyperledger/fabric-ca-server-config/server.crt
        - name: FABRIC_CA_SERVER_CA_KEYFILE
          value: /etc/hyperledger/fabric-ca-server-config/server.key
        - name: FABRIC_CA_SERVER_TLS_ENABLED
          value: "{{ $.Values.server.tlsstatus }}"
        - name: FABRIC_CA_SERVER_DEBUG
          value: "true"
        - name: FABRIC_CA_SERVER_TLS_CERTFILE
          value: /etc/hyperledger/fabric-ca-server-config/server.crt
        - name: FABRIC_CA_SERVER_TLS_KEYFILE
          value: /etc/hyperledger/fabric-ca-server-config/server.key
        - name: FABRIC_CA_SERVER_DB_DATASOURCE
          value: /var/hyperledger/fabric-ca-server/db/fabric-ca-server.db
        volumeMounts:
        - name: certificates
          mountPath: /etc/hyperledger/fabric-ca-server-config
          readOnly: true
        - name: ca-server-db
          mountPath: /var/hyperledger/fabric-ca-server/db/
