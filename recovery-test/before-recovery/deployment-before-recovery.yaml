apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      flux.weave.works/antecedent: org2-net:helmrelease/org2-net-ca
    creationTimestamp: "2020-10-22T17:42:11Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: org2-net-ca
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: ca
      helm.sh/chart: ca-0.1.0
    name: ca
    namespace: org2-net
    resourceVersion: "47228"
    selfLink: /apis/apps/v1/namespaces/org2-net/deployments/ca
    uid: e3912d21-7e33-4171-8383-d4293f037d31
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: org2-net-ca
        app.kubernetes.io/name: ca
        name: ca
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: org2-net-ca
          app.kubernetes.io/name: ca
          name: ca
      spec:
        containers:
        - command:
          - sh
          - -c
          - sleep 1 && fabric-ca-server start -b org2-admin:`cat /etc/hyperledger/fabric-ca-server-config/user_cred`
            -d
          env:
          - name: FABRIC_CA_HOME
            value: /etc/hyperledger/fabric-ca-server
          - name: FABRIC_CA_SERVER_CA_NAME
            value: ca.org2-net
          - name: FABRIC_CA_SERVER_CA_CERTFILE
            value: /etc/hyperledger/fabric-ca-server-config/server.crt
          - name: FABRIC_CA_SERVER_CA_KEYFILE
            value: /etc/hyperledger/fabric-ca-server-config/server.key
          - name: FABRIC_CA_SERVER_TLS_ENABLED
            value: "true"
          - name: FABRIC_CA_SERVER_DEBUG
            value: "true"
          - name: FABRIC_CA_SERVER_TLS_CERTFILE
            value: /etc/hyperledger/fabric-ca-server-config/server.crt
          - name: FABRIC_CA_SERVER_TLS_KEYFILE
            value: /etc/hyperledger/fabric-ca-server-config/server.key
          - name: FABRIC_CA_SERVER_DB_DATASOURCE
            value: /var/hyperledger/fabric-ca-server/db/fabric-ca-server.db
          image: hyperledger/fabric-ca:1.4.5
          imagePullPolicy: IfNotPresent
          name: ca
          ports:
          - containerPort: 7054
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/hyperledger/fabric-ca-server-config
            name: certificates
            readOnly: true
          - mountPath: /var/hyperledger/fabric-ca-server/db/
            name: ca-server-db
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: regcred
        initContainers:
        - args:
          - |-
            #!/usr/bin/env sh
            validateVaultResponse () {
            if echo ${2} | grep "errors"; then
             echo "ERROR: unable to retrieve ${1}: ${2}"
             exit 1
             fi
            }

            KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
            # Login to Vault and so I can get an approle token
            VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
              -H "Content-Type: application/json" \
              -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
              jq -r 'if .errors then . else .auth.client_token end')
            validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"

            SECRET_CERT=secret/crypto/peerOrganizations/org2-net/ca?ca.org2-net-cert.pem
            vault_secret_key=$(echo ${SECRET_CERT} |awk -F "?" '{print $1}')
            vault_data_key=$(echo ${SECRET_CERT} |awk -F "?" '{print $2}')
            LOOKUP_SECRET_RESPONSE=$(curl -sS \
                --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
                ${VAULT_ADDR}/v1/${vault_secret_key} | \
                jq -r 'if .errors then . else . end')
            validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}"
            VALUE_OF_SECRET=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r ".data[\"${vault_data_key}\"]")
            echo "${VALUE_OF_SECRET}" >> ${MOUNT_PATH}/server.crt

            SECRET_KEY=secret/crypto/peerOrganizations/org2-net/ca?org2-net-CA.key
            vault_secret_key=$(echo ${SECRET_KEY} |awk -F "?" '{print $1}')
            vault_data_key=$(echo ${SECRET_KEY} |awk -F "?" '{print $2}')
            LOOKUP_SECRET_RESPONSE=$(curl -sS \
                --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
                ${VAULT_ADDR}/v1/${vault_secret_key} | \
                jq -r 'if .errors then . else . end')
            validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}"
            VALUE_OF_SECRET=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r ".data[\"${vault_data_key}\"]")
            echo "${VALUE_OF_SECRET}" >> ${MOUNT_PATH}/server.key


            SECRET_ADMIN_PASS=secret/credentials/org2-net/ca/org2?user
            vault_secret_key=$(echo ${SECRET_ADMIN_PASS} |awk -F "?" '{print $1}')
            vault_data_key=$(echo ${SECRET_ADMIN_PASS} |awk -F "?" '{print $2}')
            LOOKUP_SECRET_RESPONSE=$(curl -sS \
                --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
            validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}"
            VALUE_OF_SECRET=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r ".data[\"${vault_data_key}\"]")
            echo "${VALUE_OF_SECRET}" >> ${MOUNT_PATH}/user_cred
          command:
          - sh
          - -c
          env:
          - name: VAULT_ADDR
            value: http://vault-test.eastus.azurecontainer.io:8200
          - name: KUBERNETES_AUTH_PATH
            value: org2-net-auth
          - name: VAULT_APP_ROLE
            value: vault-role
          - name: MOUNT_PATH
            value: /secret
          image: index.docker.io/hyperledgerlabs/alpine-utils:1.0
          imagePullPolicy: Always
          name: ca-certs-init
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /secret
            name: certificates
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: vault-auth
        serviceAccountName: vault-auth
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ca-server-db
          persistentVolumeClaim:
            claimName: ca-server-db-pvc
        - emptyDir:
            medium: Memory
          name: certificates
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-22T17:42:51Z"
      lastUpdateTime: "2020-10-22T17:42:51Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-10-22T17:42:11Z"
      lastUpdateTime: "2020-10-22T17:42:51Z"
      message: ReplicaSet "ca-6c94d8df4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      flux.weave.works/antecedent: org2-net:helmrelease/org2-net-ca-tools
    creationTimestamp: "2020-10-22T17:43:58Z"
    generation: 2
    name: ca-tools
    namespace: org2-net
    resourceVersion: "47704"
    selfLink: /apis/apps/v1/namespaces/org2-net/deployments/ca-tools
    uid: e024e32b-0d49-4191-9ab1-d031325cfa03
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ca-tools
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ca-tools
      spec:
        containers:
        - command:
          - sh
          - -c
          - /bin/bash
          image: hyperledger/fabric-ca-tools:1.2.1
          imagePullPolicy: IfNotPresent
          name: ca-tools
          resources: {}
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
          volumeMounts:
          - mountPath: /root/ca-tools
            name: ca-tools-pv
          - mountPath: /crypto-config
            name: ca-tools-crypto-pv
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ca-tools-pv
          persistentVolumeClaim:
            claimName: ca-tools-pvc
        - name: ca-tools-crypto-pv
          persistentVolumeClaim:
            claimName: ca-tools-crypto-pvc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-22T17:44:48Z"
      lastUpdateTime: "2020-10-22T17:44:48Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-10-22T17:43:58Z"
      lastUpdateTime: "2020-10-22T17:44:48Z"
      message: ReplicaSet "ca-tools-85b9b45c99" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      flux.weave.works/antecedent: org2-net:helmrelease/peer0-org2-cli
    creationTimestamp: "2020-10-22T17:58:14Z"
    generation: 2
    name: peer0-cli
    namespace: org2-net
    resourceVersion: "50442"
    selfLink: /apis/apps/v1/namespaces/org2-net/deployments/peer0-cli
    uid: 738db5b9-bd3e-4680-91f2-f5affb403580
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: cli
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cli
      spec:
        containers:
        - command:
          - sh
          - -c
          - /bin/bash
          env:
          - name: CORE_VM_ENDPOINT
            value: unix:///host/var/run/docker.sock
          - name: FABRIC_LOGGING_SPEC
            value: debug
          - name: CORE_PEER_ID
            value: peer0.org2-net
          - name: CORE_PEER_ADDRESS
            value: peer0.org2-net:7051
          - name: CORE_PEER_LOCALMSPID
            value: org2MSP
          - name: CORE_PEER_TLS_ENABLED
            value: "true"
          - name: CORE_PEER_TLS_ROOTCERT_FILE
            value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp/cacerts/ca.crt
          - name: ORDERER_CA
            value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/orderer/tls/ca.crt
          - name: ORDERER_URL
            value: orderer1.ordorg-net:7050
          - name: CORE_PEER_MSPCONFIGPATH
            value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp
          image: hyperledger/fabric-tools:2.0.0
          imagePullPolicy: Always
          name: cli
          resources: {}
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
          volumeMounts:
          - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/crypto
            name: certificates
            readOnly: true
          - mountPath: /opt/gopath/src/github.com/chaincode
            name: peer0-cli-pv
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: regcred
        initContainers:
        - args:
          - |-
            #!/usr/bin/env sh
            validateVaultResponse () {
            if echo ${2} | grep "errors"; then
             echo "ERROR: unable to retrieve ${1}: ${2}"
             exit 1
             fi
            }

            KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
            # Login to Vault and so I can get an approle token
            VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
              -H "Content-Type: application/json" \
              -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
              jq -r 'if .errors then . else .auth.client_token end')
            validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"

            vault_secret_key="${VAULT_ORDERER_SECRET_PREFIX}/tls"
            echo "Getting Orderer TLS certificates from Vault using key $vault_secret_key"

            OUTPUT_PATH="${MOUNT_PATH}/orderer/tls"
            LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')

            validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}"

            TLS_CA_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["ca.crt"]')

            mkdir -p ${OUTPUT_PATH}
            echo "${TLS_CA_CERT}" >> ${OUTPUT_PATH}/ca.crt

            vault_secret_key="${VAULT_PEER_SECRET_PREFIX}/msp"
            echo "Getting MSP certificates from Vault using key $vault_secret_key"

            OUTPUT_PATH="${MOUNT_PATH}/admin/msp"
            LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
            validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}"

            ADMINCERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["admincerts"]')
            CACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["cacerts"]')
            KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["keystore"]')
            SIGNCERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["signcerts"]')
            TLSCACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["tlscacerts"]')

            mkdir -p ${OUTPUT_PATH}/admincerts
            mkdir -p ${OUTPUT_PATH}/cacerts
            mkdir -p ${OUTPUT_PATH}/keystore
            mkdir -p ${OUTPUT_PATH}/signcerts
            mkdir -p ${OUTPUT_PATH}/tlscacerts

            echo "${ADMINCERT}" >> ${OUTPUT_PATH}/admincerts/admin.crt
            echo "${CACERTS}" >> ${OUTPUT_PATH}/cacerts/ca.crt
            echo "${KEYSTORE}" >> ${OUTPUT_PATH}/keystore/server.key
            echo "${SIGNCERTS}" >> ${OUTPUT_PATH}/signcerts/server.crt
            echo "${TLSCACERTS}" >> ${OUTPUT_PATH}/tlscacerts/tlsca.crt
          command:
          - sh
          - -c
          env:
          - name: VAULT_ADDR
            value: http://vault-test.eastus.azurecontainer.io:8200
          - name: KUBERNETES_AUTH_PATH
            value: org2-net-auth
          - name: VAULT_APP_ROLE
            value: vault-role
          - name: VAULT_PEER_SECRET_PREFIX
            value: secret/crypto/peerOrganizations/org2-net/users/admin
          - name: VAULT_ORDERER_SECRET_PREFIX
            value: secret/crypto/peerOrganizations/org2-net/orderer
          - name: MOUNT_PATH
            value: /secret
          image: index.docker.io/hyperledgerlabs/alpine-utils:1.0
          imagePullPolicy: Always
          name: certificates-init
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /secret
            name: certificates
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: vault-auth
        serviceAccountName: vault-auth
        terminationGracePeriodSeconds: 30
        volumes:
        - name: peer0-cli-pv
          persistentVolumeClaim:
            claimName: peer0-cli-pvc
        - emptyDir:
            medium: Memory
          name: certificates
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-22T17:58:51Z"
      lastUpdateTime: "2020-10-22T17:58:51Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-10-22T17:58:14Z"
      lastUpdateTime: "2020-10-22T17:58:51Z"
      message: ReplicaSet "peer0-cli-5879946874" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
